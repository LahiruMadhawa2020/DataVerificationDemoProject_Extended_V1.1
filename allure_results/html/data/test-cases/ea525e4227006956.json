{
  "uid" : "ea525e4227006956",
  "name" : "test_source_csv_general",
  "fullName" : "test_tc1_execute_testcsv#test_source_csv_general",
  "historyId" : "cdd636bd12ba0c122f79bb5f3f2845ab",
  "time" : {
    "start" : 1606724813452,
    "stop" : 1606724813577,
    "duration" : 125
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 'False' == 'True'\n  - True\n  + False",
  "statusTrace" : "csv_source_s1 =     ID   Name               Address        Email  Age Gender\n0  1.0   AAAA  23, asdassdas,adaads  abc@abc.com   34    ... 6.0  AAAFA  28, asdassdas,adaads  abh@abc.com   37      M\n6  7.0   AAAG  29, asdassdas,adaads  abi@abc.com   80      A\n\n    @allure.feature('test_module_01')\n    @allure.story('test_story_02')\n    @allure.severity('critical')\n    @pytest.mark.run(order=2)\n    def test_source_csv_general(csv_source_s1):\n        # csv_source_selection = csv_source[(csv_source.Age > 75)]\n        result = Validation().run_validation_on(csv_source_s1).expect_column_values_to_be_unique(\"ID\", \"Test - Unique value for ID\")\\\n                                                              .expect_column_values_to_not_be_null(\"ID\", \"Test - No Null values for ID\")\\\n                                                              .expect_column_value_lengths_to_equal(\"Name\", 4, \"Test - Name length is 4\")\\\n                                                              .expect_column_values_to_be_of_type(\"Name\", \"object\", \"Test - Name data type is String only\")\\\n                                                              .expect_column_values_to_be_in_set(\"Gender\", [\"M\", \"F\"], \"Test - Gender values in List\")\\\n                                                              .expect_column_values_to_match_regex(\"Email\", \"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\\\.[a-zA-Z0-9-.]+$)\", \"Test - Email format check\")\\\n                                                              .get_results()\n        \"\"\"\n            Use case description: This is a use case description, Test case 02, Validate business requirements against the data file values\n        \"\"\"\n        # perform PYTest Assertion\n>       assert TestResult().is_test_passed(result) == 'True'\nE       AssertionError: assert 'False' == 'True'\nE         - True\nE         + False\n\ntest_tc1_execute_testcsv.py:77: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "csv_source_s1",
    "time" : {
      "start" : 1606724813449,
      "stop" : 1606724813452,
      "duration" : 3
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "feature",
    "value" : "test_module_01"
  }, {
    "name" : "story",
    "value" : "test_story_02"
  }, {
    "name" : "tag",
    "value" : "run(order=2)"
  }, {
    "name" : "suite",
    "value" : "test_tc1_execute_testcsv"
  }, {
    "name" : "host",
    "value" : "ZSRIL-1X760Z2"
  }, {
    "name" : "thread",
    "value" : "10104-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_tc1_execute_testcsv"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ {
      "uid" : "272f9759323d013c",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 'False' == 'True'\n  - True\n  + False",
      "time" : {
        "start" : 1606723521973,
        "stop" : 1606723522085,
        "duration" : 112
      }
    }, {
      "uid" : "e2718b6f3ee1e971",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 'False' == 'True'\n  - True\n  + False",
      "time" : {
        "start" : 1606634781906,
        "stop" : 1606634782002,
        "duration" : 96
      }
    }, {
      "uid" : "38656b571f81d70d",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 'False' == 'True'\n  - True\n  + False",
      "time" : {
        "start" : 1606634184483,
        "stop" : 1606634184586,
        "duration" : 103
      }
    }, {
      "uid" : "6949816c3979d87d",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 'False' == 'True'\n  - True\n  + False",
      "time" : {
        "start" : 1606407570488,
        "stop" : 1606407570579,
        "duration" : 91
      }
    }, {
      "uid" : "8ff4709f782a9f5b",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 'False' == 'True'\n  - True\n  + False",
      "time" : {
        "start" : 1606407249857,
        "stop" : 1606407249947,
        "duration" : 90
      }
    }, {
      "uid" : "ebffe5f6846b3c4d",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 'False' == 'True'\n  - True\n  + False",
      "time" : {
        "start" : 1606395849340,
        "stop" : 1606395849462,
        "duration" : 122
      }
    }, {
      "uid" : "92926a4eed4fe7a9",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 'False' == 'True'\n  - True\n  + False",
      "time" : {
        "start" : 1606393316834,
        "stop" : 1606393316926,
        "duration" : 92
      }
    }, {
      "uid" : "2f8d227f3ca3c8e",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 'False' == 'True'\n  - True\n  + False",
      "time" : {
        "start" : 1606391404705,
        "stop" : 1606391404814,
        "duration" : 109
      }
    }, {
      "uid" : "fcab586cac47eff4",
      "status" : "failed",
      "statusDetails" : "AssertionError: assert 'False' == 'True'\n  - True\n  + False",
      "time" : {
        "start" : 1606374272085,
        "stop" : 1606374272178,
        "duration" : 93
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "run(order=2)" ]
  },
  "source" : "ea525e4227006956.json",
  "parameterValues" : [ ]
}